import os
import time
import logging
from celery import shared_task
from django.contrib.auth import get_user_model
from core.passport_classifier.utils import predict_passport_photo

logger = logging.getLogger(__name__)

@shared_task(bind=True)
def validate_passport_images_task(self, user_id, selfie_path, front_path, back_path):
    try:
        logger.info(f"üöÄ [Task {self.request.id}] –°—Ç–∞—Ä—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è User #{user_id}")
        User = get_user_model()
        user = User.objects.get(pk=user_id)

        def validate_photo(path, label):
            logger.info(f"üîç [{label.upper()}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞—Ç–∞. –ü—É—Ç—å: {path}")
            if not os.path.exists(path):
                raise FileNotFoundError(f"[{label.upper()}] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")

            start = time.perf_counter()
            ok, reason = predict_passport_photo(path, expected_type=label, return_reason=True)
            elapsed = time.perf_counter() - start
            logger.info(f"‚úÖ [{label.upper()}] –†–µ–∑—É–ª—å—Ç–∞—Ç: {ok}, –ü—Ä–∏—á–∏–Ω–∞: {reason}, –í—Ä–µ–º—è: {elapsed:.2f} —Å–µ–∫.")
            return ok, reason

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        face_ok, face_msg = validate_photo(selfie_path, "face")
        front_ok, front_msg = validate_photo(front_path, "front")
        back_ok, back_msg = validate_photo(back_path, "back")

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        all_passed = all([face_ok, front_ok, back_ok])
        user.passport_status = "validated" if all_passed else "rejected"

        # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        user.is_verified = all_passed

        user.save()
        logger.info(f"üéØ [User #{user_id}] –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {user.passport_status}, is_verified={user.is_verified}")

        # –í–µ—Ä–Ω—É—Ç—å –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ
        return {
            "user_id": user_id,
            "status": user.passport_status,
            "results": {
                "selfie": {"ok": face_ok, "msg": face_msg},
                "front": {"ok": front_ok, "msg": front_msg},
                "back": {"ok": back_ok, "msg": back_msg},
            }
        }

    except Exception as e:
        logger.exception(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Å–ø–æ—Ä—Ç–æ–≤ –¥–ª—è User #{user_id}: {e}")
        return {
            "user_id": user_id,
            "error": str(e),
            "status": "failed"
        }
